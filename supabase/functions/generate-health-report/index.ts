import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.53.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userId } = await req.json();

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get user's health logs from the last 30 days
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const { data: healthLogs, error: logsError } = await supabase
      .from('health_logs')
      .select('*')
      .eq('user_id', userId)
      .gte('log_date', thirtyDaysAgo.toISOString().split('T')[0])
      .order('log_date', { ascending: true });

    if (logsError) {
      console.error('Error fetching logs:', logsError);
      throw new Error('Failed to fetch health logs');
    }

    if (!healthLogs || healthLogs.length === 0) {
      throw new Error('No health logs found for the last 30 days');
    }

    // Prepare health data for analysis
    const healthData = healthLogs.map(log => ({
      date: log.log_date,
      entry: log.entry_text,
      mood: log.mood_rating,
      sleep: log.sleep_rating,
      symptoms: log.symptoms,
      tags: log.tags || []
    }));

    // Call Gemini API for report generation
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('Gemini API key not configured');
    }

    const systemPrompt = `You are a health data analyst creating a medical-style summary report for a patient to share with their doctor. Analyze the provided health journal entries and create a comprehensive, professional report.

REPORT STRUCTURE:
1. **Executive Summary** - Brief overview of the reporting period and key findings
2. **Symptom Analysis** - Most frequent symptoms, patterns, and timing
3. **Lifestyle Factors** - Sleep patterns, mood trends, diet observations
4. **Potential Correlations** - Any patterns between lifestyle factors and symptoms
5. **Recommendations for Healthcare Provider** - Key discussion points for medical consultation

GUIDELINES:
- Use professional, medical-style language
- Focus on objective observations, not diagnoses
- Highlight patterns and frequencies
- Note any concerning trends
- Include specific dates and data points
- Format for easy physician review
- Keep medical disclaimer

Health Journal Data (Last 30 Days):
${JSON.stringify(healthData, null, 2)}

Generate a comprehensive health report that a patient can confidently share with their healthcare provider.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [{ text: systemPrompt }]
          }
        ],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('Gemini API error:', data);
      throw new Error(`Gemini API error: ${data.error?.message || 'Unknown error'}`);
    }

    const reportContent = data.candidates?.[0]?.content?.parts?.[0]?.text || 
      'Unable to generate report at this time.';

    // Add medical disclaimer
    const finalReport = `${reportContent}

---

**MEDICAL DISCLAIMER:**
This report is generated from self-reported health journal entries and is not a medical diagnosis. It is intended to facilitate discussion with healthcare providers. Please consult with qualified medical professionals for any health concerns or before making changes to treatment plans.

*Report generated by Plusnote AI Health Journal on ${new Date().toLocaleDateString()}*`;

    return new Response(JSON.stringify({ 
      report: finalReport,
      dataPoints: healthLogs.length,
      dateRange: {
        start: healthLogs[0]?.log_date,
        end: healthLogs[healthLogs.length - 1]?.log_date
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-health-report function:', error);
    return new Response(JSON.stringify({ 
      error: 'Failed to generate health report',
      message: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});