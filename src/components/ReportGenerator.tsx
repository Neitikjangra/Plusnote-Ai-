import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { FileText, Download, Calendar, TrendingUp, Loader2 } from 'lucide-react';
import { format } from 'date-fns';

interface Report {
  id: string;
  title: string;
  content: string;
  date_range_start: string;
  date_range_end: string;
  created_at: string;
}

interface ReportGeneratorProps {
  userId: string;
}

export function ReportGenerator({ userId }: ReportGeneratorProps) {
  const [showDialog, setShowDialog] = useState(false);
  const [generating, setGenerating] = useState(false);
  const [loading, setLoading] = useState(false);
  const [currentReport, setCurrentReport] = useState<Report | null>(null);
  const [reports, setReports] = useState<Report[]>([]);
  const { toast } = useToast();

  const generateReport = async () => {
    setGenerating(true);

    try {
      // Call the AI edge function to generate report
      const { data, error } = await supabase.functions.invoke('generate-health-report', {
        body: { userId }
      });

      if (error) throw error;

      // Save the report to database
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 30); // Last 30 days

      const { data: savedReport, error: saveError } = await supabase
        .from('health_reports')
        .insert({
          user_id: userId,
          title: `Health Report - ${format(endDate, 'MMM yyyy')}`,
          content: data.report,
          date_range_start: startDate.toISOString().split('T')[0],
          date_range_end: endDate.toISOString().split('T')[0]
        })
        .select()
        .single();

      if (saveError) throw saveError;

      setCurrentReport(savedReport);
      setShowDialog(true);
      
      toast({
        title: "Report Generated!",
        description: "Your health report has been created successfully.",
      });
    } catch (error) {
      console.error('Report generation error:', error);
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: "Sorry, I couldn't generate your report right now. Please try again.",
      });
    } finally {
      setGenerating(false);
    }
  };

  const downloadReport = (report: Report) => {
    const content = `
# ${report.title}

**Date Range:** ${format(new Date(report.date_range_start), 'MMM d, yyyy')} - ${format(new Date(report.date_range_end), 'MMM d, yyyy')}
**Generated:** ${format(new Date(report.created_at), 'MMM d, yyyy')}

---

${report.content}

---

*This report was generated by Plusnote - Your AI Health Journal Companion*
    `.trim();

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Download Started",
      description: "Your report has been downloaded as a markdown file.",
    });
  };

  const downloadPDF = async (report: Report) => {
    try {
      setLoading(true);
      
      // Call the edge function to generate PDF
      const { data, error } = await supabase.functions.invoke('generate-health-report', {
        body: { userId, format: 'pdf' }
      });

      if (error) throw error;

      // The response should be a PDF blob
      const blob = new Blob([data], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `health-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "PDF Generated!",
        description: "Your health report has been downloaded as a PDF.",
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        variant: "destructive",
        title: "PDF Generation Failed",
        description: "Sorry, I couldn't generate the PDF. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      {/* Generate Report Button */}
      <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-40">
        <Button
          onClick={generateReport}
          disabled={generating}
          className="bg-gradient-accent hover:opacity-90 shadow-floating text-black font-semibold px-8 py-3 text-lg"
          size="lg"
        >
          {generating ? (
            <>
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
              Analyzing...
            </>
          ) : (
            <>
              <FileText className="mr-2 h-5 w-5" />
              Generate Report
            </>
          )}
        </Button>
      </div>

      {/* Report Preview Dialog */}
      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-health-primary" />
              {currentReport?.title}
            </DialogTitle>
          </DialogHeader>
          
          {currentReport && (
            <div className="space-y-4">
              {/* Report Metadata */}
              <div className="flex items-center justify-between p-4 bg-health-surface rounded-lg">
                <div className="flex items-center gap-4">
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <Calendar className="h-3 w-3" />
                    {format(new Date(currentReport.date_range_start), 'MMM d')} - {format(new Date(currentReport.date_range_end), 'MMM d, yyyy')}
                  </Badge>
                  <span className="text-sm text-muted-foreground">
                    Generated {format(new Date(currentReport.created_at), 'MMM d, yyyy')}
                  </span>
                </div>
                <div className="flex gap-2">
                  <Button
                    onClick={() => downloadReport(currentReport)}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                  >
                    <Download className="h-4 w-4" />
                    Markdown
                  </Button>
                  <Button
                    onClick={() => downloadPDF(currentReport)}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-2"
                    disabled={loading}
                  >
                    <Download className="h-4 w-4" />
                    PDF
                  </Button>
                </div>
              </div>

              {/* Report Content */}
              <div className="max-h-[50vh] overflow-y-auto">
                <Card>
                  <CardContent className="p-6">
                    <div className="prose prose-sm max-w-none">
                      <div className="whitespace-pre-wrap text-sm leading-relaxed">
                        {currentReport.content}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end gap-2 pt-4 border-t">
                <Button variant="outline" onClick={() => setShowDialog(false)}>
                  Close
                </Button>
                <Button
                  onClick={() => downloadReport(currentReport)}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Download className="mr-2 h-4 w-4" />
                  Markdown
                </Button>
                <Button
                  onClick={() => downloadPDF(currentReport)}
                  className="bg-gradient-primary flex items-center gap-2"
                  disabled={loading}
                >
                  <Download className="mr-2 h-4 w-4" />
                  Download PDF
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}